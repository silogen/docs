apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-job-{{ randAlphaNum 5 | lower }}"
  {{- if .Values.labels }}
  labels:
    {{- range $label, $value := .Values.labels }}
    {{ $label }}: {{ $value | quote }}
    {{- end }}
  {{- end }}
spec:
  ttlSecondsAfterFinished: 3600
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never
      volumes:
        - name: scripts
          configMap:
            name: "{{ .Release.Name }}-scripts"
        - name: downloads
          {{- if .Values.storageClass }}
          ephemeral:
            volumeClaimTemplate:
              spec:
                accessModes: [ "ReadWriteOnce" ]
                storageClassName: {{ .Values.storageClass }}
                resources:
                  requests:
                    storage: "{{ .Values.storageQuantity }}"
          {{- else }}
          emptyDir:
            sizeLimit: "{{ .Values.storageQuantity }}"
          {{- end }}
      initContainers:
        - name: download
          image: {{ .Values.ioImage }}
          imagePullPolicy: Always
          command: ["sh", "-euc"]
          args:
            - |
              # Download data and tokenizer
              mkdir -p /downloads/tokenizer

              {{- if .Values.hfTokenSecret }}
              HF_TOKEN=$HF_TOKEN \
              {{- end }}
              bash /scripts/download_data_tokenizer.sh \
              {{ .Values.tokenizer }}
          resources:
          resources:
            {{- with .Values.resources.downloadContainer }}
            limits:
              memory: "{{ .memory }}"
              cpu: "{{ .cpu }}"
            requests:
              memory: "{{ .memory }}"
              cpu: "{{ .cpu }}"
            {{- end }}
          env:
            {{- if .Values.hfTokenSecret }}
            - name: HF_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.hfTokenSecret.name }}
                  key: {{ .Values.hfTokenSecret.key }}
            {{- end }}
          volumeMounts:
            - mountPath: /downloads
              name: downloads
            - mountPath: /scripts
              name: scripts

        - name: upload
          image: {{ .Values.ioImage }}
          imagePullPolicy: Always
          restartPolicy: Always
          command: ["sh", "-euc"]
          args:
            - |
              echo "Setting up minio"
              mc alias set minio-host ${BUCKET_STORAGE_HOST} ${BUCKET_STORAGE_ACCESS_KEY} ${BUCKET_STORAGE_SECRET_KEY};

              while [ ! -f /downloads/done_preprocessing ]; do
                echo "Waiting for data preprocessing to finish...";
                sleep 60
              done

              echo "Preprocessing done, syncing data to remote storage {{ .Values.bucketDataDir | trimSuffix "/" }}...";
              mc cp --recursive /downloads/datasets/ minio-host/{{ .Values.bucketDataDir | trimSuffix "/" }}/;
              mc mirror --overwrite --exclude "**/.cache/*" \
                /downloads/tokenizer/ minio-host/{{ .Values.bucketTokenizersDir | trimSuffix "/" }}/;
              echo "Done uploading. Signal to the main container that it can exit.";
              touch /downloads/done_uploading;
          resources:
            limits:
              memory: "1Gi"
              cpu: "1"
            requests:
              memory: "1Gi"
              cpu: "1"
          env:
            - name: BUCKET_STORAGE_HOST
              value: {{ .Values.bucketStorageHost }}
            - name: BUCKET_STORAGE_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.bucketCredentialsSecret.name }}
                  key: {{ .Values.bucketCredentialsSecret.accessKeyKey }}
            - name: BUCKET_STORAGE_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.bucketCredentialsSecret.name }}
                  key: {{ .Values.bucketCredentialsSecret.secretKeyKey }}
          volumeMounts:
            - mountPath: /downloads
              name: downloads

      containers:
        - name: preprocess
          image: {{ .Values.preprocessingImage }}
          imagePullPolicy: Always
          command: ["sh", "-euc"]
          args:
            - |
              # Preprocess data
              mkdir -p /downloads/datasets

              bash /scripts/prepare_data.sh \
              {{ .Values.dataset.dsName }} \
              {{ .Values.dataset.fileName }} \
              {{ .Values.dataset.outputPrefix }} \
              {{ .Values.dataset.jsonKey }} \
              {{ .Values.tokenizer }}

              # Exchange signals with upload container to wrap up the run
              touch /downloads/done_preprocessing;
              while [ ! -f /downloads/done_uploading ]; do
                sleep 15
              done
          resources:
            {{- with .Values.resources.mainContainer }}
            limits:
              memory: "{{ .memory }}"
              cpu: "{{ .cpu }}"
              amd.com/gpu: "{{ .gpu }}"
            requests:
              memory: "{{ .memory }}"
              cpu: "{{ .cpu }}"
              amd.com/gpu: "{{ .gpu }}"
            {{- end }}
          env:
            - name: HIP_VISIBLE_DEVICES
              value: "0"
          volumeMounts:
            - mountPath: /downloads
              name: downloads
            - mountPath: /scripts
              name: scripts
