# Use to add labels to the metadata of the resources created by this workload.
labels:
  kaiwo.silogen.ai/managed: "true"

# Data download and preprocess script:
dataScript: |
  import datasets
  def _argilla_message_formatter(example, idx):
      # The generation_prompt field seems to have an additional layer of list, so we take the first element.
      # Also note that this always includes an empty system prompt.
      messages = example["generation_prompt"][0]
      # There are both the "generations" and the "raw_generation_responses" fields. It seems that they contain the same content and
      # there are never actually more than one generated response per prompt. We use "generations" here because maybe it's processed with some
      # filter or something.
      messages.append({"role": "assistant", "content": example["generations"][0]})
      return {
          "dataset": "argilla-10k-mistral-large-human-prompts",
          "id": f"argilla-10k-mistral-large-human-prompts_{idx}",
          "messages": messages,
      }
  hf_id="argilla/10k_prompts_ranked_mistral_large_responses"
  dataset = datasets.load_dataset(hf_id, split="train")
  dataset = dataset.filter(lambda kind: kind == "human", input_columns="kind")
  dataset = dataset.map(_argilla_message_formatter, with_indices=True, remove_columns=dataset.column_names)
  dataset.to_json("/downloads/datasets/argilla-mistral-large-human-prompts.jsonl") # Need to save any data files in this specific directory to be uploaded.

# Where the resources should be stored:
bucketDataDir: default-bucket/datasets/
bucketStorageHost: http://minio.minio-tenant-default.svc.cluster.local:80

# Bucket credentials from a secret:
bucketCredentialsSecret:
  name: minio-credentials
  accessKeyKey: minio-access-key
  secretKeyKey: minio-secret-key

# Storage configuration:
storageClass: mlstorage
storageQuantity: "10Gi"
